## -*- encoding: utf-8 -*-
## This file (LinearRegression.sagetex.sage) was *autogenerated* from LinearRegression.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('LinearRegression', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = 47
_st_.blockbegin()
try:
 def linear_regression(data, draw=False):
     """
     Input:
         data: a list of pairs [(x1,y1), ..., (xN,yN)]
     Output:
         Output [a,b] so that the line y = ax + b
         is the best fitting line for the data.
         When draw == True,
         create a graphical illustration p and return [a,b,p].
     """
     NN = len(data)
     ### x_list = [x1, x2, ..., xN]
     x_list = [p[0] for p in data]
     ### one_list = [1,1, ..., 1]
     one_list = [1] * NN
     ### y_list = [y1, y2, ..., yN]
     y_list = [p[1] for p in data]
     ### define A and v as described in the algorithm
     A = matrix([x_list, one_list]).transpose()
     v = matrix([y_list]).transpose()
     AT = A.transpose()
     ATA = AT * A
     ATAinv = ATA.pseudoinverse()
     ans = ATAinv * AT * v
     a, b = ans.transpose()[0]
 
     if draw:
         x_min = min(x_list)
         x_max = max(x_list)
         x_range = x_max - x_min
         x = var('x')
         pic = (a*x + b).plot(xmin=x_min-0.1*x_range,
                              xmax=x_max+0.1*x_range)
         pic += point(data, rgbcolor='red', size=30)
 
         return [a,b,pic]
 
     return [a,b]
except:
 _st_.goboom(86)
_st_.blockend()
_st_.current_tex_line = 89
_st_.blockbegin()
try:
 ### horizontal data
 data = [(1,1),(2,1),(3,1),(4,1),(5,1)]
 
 a,b,p = linear_regression(data,True)
except:
 _st_.goboom(94)
_st_.blockend()
try:
 _st_.current_tex_line = 95
 _st_.inline(0, latex(a))
except:
 _st_.goboom(95)
try:
 _st_.current_tex_line = 95
 _st_.inline(1, latex(b))
except:
 _st_.goboom(95)
try:
 _st_.current_tex_line = 96
 _st_.plot(0, format='notprovided', _p_=p)
except:
 _st_.goboom(96)
_st_.current_tex_line = 98
_st_.blockbegin()
try:
 ### linear data
 data = [(1,1),(2,1.5),(3,2),(4,2.5),(5,3)]
 
 a,b,p = linear_regression(data,True)
except:
 _st_.goboom(103)
_st_.blockend()
try:
 _st_.current_tex_line = 104
 _st_.inline(2, latex(a))
except:
 _st_.goboom(104)
try:
 _st_.current_tex_line = 104
 _st_.inline(3, latex(b))
except:
 _st_.goboom(104)
try:
 _st_.current_tex_line = 105
 _st_.plot(1, format='notprovided', _p_=p)
except:
 _st_.goboom(105)
_st_.current_tex_line = 107
_st_.blockbegin()
try:
 ### non-linear data
 data = [(1,1),(2,1),(3,2),(4,2),(5,3)]
 
 a,b,p = linear_regression(data,True)
except:
 _st_.goboom(112)
_st_.blockend()
try:
 _st_.current_tex_line = 113
 _st_.inline(4, latex(a))
except:
 _st_.goboom(113)
try:
 _st_.current_tex_line = 113
 _st_.inline(5, latex(b))
except:
 _st_.goboom(113)
try:
 _st_.current_tex_line = 114
 _st_.plot(2, format='notprovided', _p_=p)
except:
 _st_.goboom(114)
_st_.current_tex_line = 116
_st_.blockbegin()
try:
 ### almost-linear data
 import numpy as np
 x = np.linspace(1,5,50)
 y = x*0.2 + 1 + 0.1*np.random.randn(50)
 data = list(zip(x,y))
 
 a,b,p = linear_regression(data,True)
except:
 _st_.goboom(124)
_st_.blockend()
try:
 _st_.current_tex_line = 125
 _st_.inline(6, latex(a))
except:
 _st_.goboom(125)
try:
 _st_.current_tex_line = 125
 _st_.inline(7, latex(b))
except:
 _st_.goboom(125)
try:
 _st_.current_tex_line = 126
 _st_.plot(3, format='notprovided', _p_=p)
except:
 _st_.goboom(126)
_st_.endofdoc()
